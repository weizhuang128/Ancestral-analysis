
#from multiprocessing impor
#from multiprocessing.dummy import Pool as ThreadPool

#pool = ThreadPool(500)  # Sets the pool size

#import gzip

'''
import os
#get the fold path
filedir = os.getcwd()+'/23mofang2me_extented_and_core'
#get the files list
filenames=os.listdir(filedir)
#open and create the txt
f=open('result.txt','w')
#get the file name
for filename in filenames:
    filepath = filedir+'/'+filename
    #read lines
    for line in open(filepath):
        f.writelines(line)
    // f.write('\n')
#close the files
f.close()
'''
from Tkinter import *
import tkFileDialog
root = Tk(className='mofang to 23andme')
filename = tkFileDialog.askopenfilename(initialdir = 'C:/')
genome_dict = {}
    # Index files for all posible formats will be provided automatically
    # Do not change the default path below if you wish to use those
#need_tochanged_files = gzip.open(r'genome_full_snps.txt.gz')
with open(filename, 'r') as idx_f:
    for line in idx_f:
        if not line.startswith('NA'and '#'):
            #print ('this is' ,line)
            fields = line.strip().split('\t')
            # index_pos = fields[0]
            rsid = fields[0]
            #chromosome = fields[1]                'chromosome': chromosome,
            #position = fields[2],'position': position
            genotype = fields[3]
            # start_pos = int(index_pos) * 2
            genome_dict[rsid] = {
                'genotype': genotype,
            }
#print genome_dict

#import re
me23 = open(r'template_23andme.txt')
new_me23 = open('new_me23.txt', 'a+')
new_me23.write('''# This data file generated by 23andMe at: Sat Jun 16 16:16:16 2016
#
# This file contains raw genotype data, including data that is not used in 23andMe reports.
# This data has undergone a general quality review however only a subset of markers have been
# individually validated for accuracy. As such, this data is suitable only for research,
# educational, and informational use and not for medical or other use.
#
# Below is a text version of your data.  Fields are TAB-separated
# Each line corresponds to a single SNP.  For each SNP, we provide its identifier
# (an rsid or an internal id), its location on the reference human genome, and the
# genotype call oriented with respect to the plus strand on the human reference sequence.
# We are using reference human assembly build 37 (also known as Annotation Release 104).
# Note that it is possible that data downloaded at different times may be different due to ongoing
# improvements in our ability to call genotypes. More information about these changes can be found at:
# https://www.23andme.com/you/download/revisions/
#
# More information on reference human assembly build 37 (aka Annotation Release 104):
# http://www.ncbi.nlm.nih.gov/mapview/map_search.cgi?taxid=9606
#
# rsid	chromosome	position	genotype
''')
mofang23 = genome_dict
matchNO = 0
for me23_line in me23:
    me23_fields = me23_line.strip().split('\t')
    # index_pos = fields[0]
    me23_rsid = me23_fields[0]
    #me23_chromosome = me23_fields[1]
    #me23_position = me23_fields[2]
    #me23_genotype = me23_fields[3]
    #print me23_rsid

    if me23_rsid in mofang23:
        mofang23_genotype = mofang23[me23_rsid]['genotype']
        mofang23_genotype = ''.join(sorted(mofang23_genotype))
        me23_line = me23_line.replace('--', mofang23_genotype)
        matchNO = matchNO + 1
        #break
        #print mofang23_genotype

    new_me23.write(me23_line)

print matchNO
Matched_NO_display =  Label(root, width=40)
Matched_NO_display['text'] = 'Matched SNP number is ',matchNO
Matched_NO_display.pack()

root.mainloop()
#pool.map(change_SNP,me23)
#map(change_SNP,me23)
#pool.close()
#pool.join()
# pyinstaller -F -w *.py build the py -w can move the CMD interface but will be recognized as a virus
#print matchNO
